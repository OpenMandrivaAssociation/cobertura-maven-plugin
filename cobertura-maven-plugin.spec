%_javapackages_macros
Name:           cobertura-maven-plugin
Version:        2.6
Release:        1.0%{?dist}
Summary:        Plugin providing the features of Cobertura within Maven


# the project is under ASL 2.0 license
# javascript files in src/site/resources/sample-maven-shared-io-report/js/
# are under GPLv2 and GPLv2+
License:        ASL 2.0 and GPLv2 and GPLv2+
URL:            http://mojo.codehaus.org/cobertura-maven-plugin/
Source0:        http://repo2.maven.org/maven2/org/codehaus/mojo/%{name}/%{version}/%{name}-%{version}-source-release.zip
Source1:        http://www.apache.org/licenses/LICENSE-2.0.txt
BuildArch:      noarch

BuildRequires:  maven-local
BuildRequires:  mvn(commons-lang:commons-lang)
BuildRequires:  mvn(httpunit:httpunit)
BuildRequires:  mvn(junit:junit)
BuildRequires:  mvn(net.sourceforge.cobertura:cobertura)
BuildRequires:  mvn(net.sourceforge.cobertura:cobertura-runtime)
BuildRequires:  mvn(org.apache.maven.plugins:maven-clean-plugin)
BuildRequires:  mvn(org.apache.maven.reporting:maven-reporting-api)
BuildRequires:  mvn(org.apache.maven.reporting:maven-reporting-impl)
BuildRequires:  mvn(org.apache.maven.shared:maven-invoker)
BuildRequires:  mvn(org.apache.maven.shared:maven-plugin-testing-harness)
BuildRequires:  mvn(org.apache.maven:maven-artifact)
BuildRequires:  mvn(org.apache.maven:maven-core)
BuildRequires:  mvn(org.apache.maven.plugins:maven-invoker-plugin)
BuildRequires:  mvn(org.apache.maven:maven-plugin-api)
BuildRequires:  mvn(org.apache.maven:maven-project)
BuildRequires:  mvn(org.codehaus.mojo:mojo-parent)
BuildRequires:  mvn(org.codehaus.plexus:plexus-utils)
BuildRequires:  mvn(urbanophile:java-getopt)

Provides:       maven-plugin-cobertura = %{version}-%{release}
Obsoletes:      maven-plugin-cobertura < 2.5.2-1

%description
This plugin provides the features of Cobertura within the Maven 2 & 3
environment. The report generated by this plugin is the result of executing
the Cobertura tool against your compiled classes to help you determine
how well the unit testing efforts have been, and can then be used to identify
which parts of your Java program are lacking test coverage.

%package        javadoc
Summary:        Javadoc for %{name}

%description    javadoc
This package contains the API documentation for %{name}.

%prep
%setup -q -n %{name}-%{version}
cp %{SOURCE1} LICENSE

# we don't have this extension
%pom_xpath_remove "pom:extension[pom:artifactId[text()='wagon-webdav-jackrabbit']]"

# remove bundled .class files
find . -name *.class -delete

# these tests fail (NoClassDefFoundError: net.sf.cglib.proxy.CallbackFilter)
rm -f src/test/java/org/codehaus/mojo/cobertura/CoberturaInstrumentMojoTest.java
rm -f src/test/java/org/codehaus/mojo/cobertura/CoberturaReportMojoTest.java

# following integration tests need cobertura 2.0 to work
rm -Rf src/it/mcobertura-176
rm -Rf src/it/mcobertura-65

%build
# tests are disabled because of missing dependencies
%mvn_build

%install
%mvn_install

%files -f .mfiles
%doc LICENSE

%files javadoc -f .mfiles-javadoc
%doc LICENSE
